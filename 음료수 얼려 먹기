// bfs & dfs
#include <iostream>
#include <queue> 

using namespace std;

int N, M;
int answer = 0;
int ice[100][100];

int dx[] = { -1, 1, 0, 0 };
int dy[] = { 0, 0, 1, -1 };

void dfs(pair<int, int> start)
{
	queue<pair<int, int>> q;
	q.push(start);
	ice[start.first][start.second] = 2;

	while (!q.empty())
	{
		pair<int, int> temp = q.front();
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int nx = temp.first + dx[i];
			int ny = temp.second + dy[i];

			if (nx >= 0 && nx < N && ny >= 0 && ny < M && ice[nx][ny] == 0)
			{
				q.push(make_pair(nx, ny));
				ice[nx][ny] = 2;
			}
		}
	}

	answer++;
}

int main(void)
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	cin >> N >> M;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			cin >> ice[i][j];
		}
	}

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if (ice[i][j] == 0)
			{
				dfs(make_pair(i, j));
				for (int a = 0; a < N; a++)
				{
					for (int b = 0; b < M; b++)
					{
						cout << ice[a][b] << " ";
					}
					cout << endl;
				}
				cout << endl;
			}
		}
	}

	cout << answer;
	return 0;
}
