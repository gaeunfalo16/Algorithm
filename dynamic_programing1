// Matrix_Course_Problem
#include <iostream>
#include <vector>
using namespace std;

int max(int, int);

int main()
{
	int N;
	int temp;
	cin >> N;

	int** matrix = (int**)malloc(sizeof(int*) * (N + 1)); // matrix value
	int** cost = (int**)malloc(sizeof(int*) * (N + 1)); // cost

	for (int i = 0; i <= N; i++)
	{
		matrix[i] = (int*)malloc(sizeof(int) * (N + 1));
		cost[i] = (int*)malloc(sizeof(int) * (N + 1));
	}

	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= N; j++)
		{
			cin >> temp;
			matrix[i][j] = temp;
		}
	}
	
	for (int i = 0; i <= N; i++)
	{
		cost[0][i] = 0;
		cost[i][0] = 0;
	}

	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= N; j++)
		{
			cost[i][j] = matrix[i][j] + max(cost[i - 1][j], cost[i][j - 1]);
		}
	}

	cout << cost[N][N];
}

int max(int a, int b)
{
	if (a > b)
	{
		return a;
	}
	else
	{
		return b;
	}
}
